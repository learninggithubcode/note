并发编程的目的：让程序更快的运行、提高资源利用率。

并发编程面临的问题：
    1、上下文切换：CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，
       以便下次切换回这个任务时，可以再加载这个任务的状态。所以任务从保存到再加载的过程就是一次上下文切换。上下文频繁的切换，会影响到程序
       的执行效率。
    2、死锁
    3、资源限制：在并发编程时，程序的执行速度受限于计算机硬件资源或软件资源。


线程的优势
    如果使用得当，线程可以有效的降低程序的开发和维护成本，同时提升复杂应用程序的性能，带来以下好处：
    1、发货多处理器的强大能力；
    2、建模的简单性，讲复杂的工作流程分解为一组简单的工作流；
    3、异步事件的简化处理；
    4、响应更灵敏的用户界面；

线程带来的风险:
    1、安全性问题。在没有充足同步的情况下，多个线程中的操作执行顺序是不可预测的，甚至会产生奇怪的结果。
    2、活跃性问题。最常见的形式是无意中造成的无限循环（多线程中的死锁）。
    3、性能问题。线程能提高程序的性能，但是总会带来走中程度的开销，例如频繁的上下文切换。



出现的术语：
   CAS（Compare and swap）：比较和替换，是设计并发时用到的一种技术。简单来说，比较和替换是使用一个期望值和一个变量的当前值进行比较，
   如果当前变量的值与我们期望的值相等，就使用一个新值替换当前变量的值。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当
   预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。自我理解：A == V ? B : V

