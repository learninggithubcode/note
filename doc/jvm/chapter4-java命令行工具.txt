jps
    全称：Java Virtual Machine Process Status Tool。
    作用：显示当前所有java进程pid。
    语法：jps [-q] [-mlvV] [<hostid>]
    参数解释：
        -q:只显示pid，不显示class名称,jar文件名和传递给main 方法的参数；
        -m:输出传递给main 方法的参数，在嵌入式jvm上可能是null；
        -l:输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名；
        -v:输出传递给JVM的参数；
        -V:输出pid和应用名；
    参考：
        1、http://www.hollischuang.com/archives/105
        2、http://www.importnew.com/?p=18132&preview=true

jstat
    全称：JVM Statistics Monitoring Tool。
    作用：用于监控虚拟机各种运行状态信息的命令行工具。他可以显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。
    语法：jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]
    参数解释：
        option：选项，我们一般使用 -gcutil 查看gc情况。
                主要分为3类：类装载、垃圾收集和运行期编译状况，具体选项及作用如下：
                –class：监视类装载、卸载数量、总空间及类装载所耗费的时间。
                –gc：监视Java堆状况，包括Eden区、2个Survivor区、老年代、永久代等的容量。
                –gccapacity：监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用到的最大和最小空间。
                –gcutil：监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比。
                –gccause：与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因。
                –gcnew：监视新生代GC的状况。
                –gcnewcapacity：监视内容与-gcnew基本相同，输出主要关注使用到的最大和最小空间。
                –gcold：监视老年代GC的状况。
                -gcoldcapacity：监视内容与——gcold基本相同，输出主要关注使用到的最大和最小空间。
                –gcpermcapacity：输出永久代使用到的最大和最小空间。
                –compiler：输出JIT编译器编译过的方法、耗时等信息。
                –printcompilation：输出已经被JIT编译的方法。

        vmid：VM的进程号，即当前运行的java进程号。
        interval：间隔时间，单位为秒或者毫秒。
        count：打印次数，如果缺省则打印无数次。

    参数interval和count代表查询间隔和次数，如果省略这两个参数，说明只查询一次。

    常用术语：
    1、jstat –class<pid> : 显示加载class的数量，及所占空间等信息
       Loaded 装载的类的数量；
       Bytes 装载类所占用的字节数；
       Unloaded 卸载类的数量；
       Bytes 卸载类的字节数；
       Time 装载和卸载类所花费的时间。

    2、jstat -compiler <pid>显示VM实时编译的数量等信息
       Compiled 编译任务执行数量
       Failed 编译任务执行失败数量
       Invalid 编译任务执行失效数量
       Time 编译任务消耗时间
       FailedType 最后一个编译失败任务的类型
       FailedMethod 最后一个编译失败任务所在的类及方法

    3、jstat -gc <pid>: 可以显示gc的信息，查看gc的次数，及时间。
       S0C 年轻代中第一个survivor（幸存区）的容量 (字节)
       S1C 年轻代中第二个survivor（幸存区）的容量 (字节)
       S0U 年轻代中第一个survivor（幸存区）目前已使用空间 (字节)
       S1U 年轻代中第二个survivor（幸存区）目前已使用空间 (字节)
       EC 年轻代中Eden（伊甸园）的容量 (字节)
       EU 年轻代中Eden（伊甸园）目前已使用空间 (字节)
       OC Old代的容量 (字节)
       OU Old代目前已使用空间 (字节)
       PC Perm(持久代)的容量 (字节)
       PU Perm(持久代)目前已使用空间 (字节)
       YGC 从应用程序启动到采样时年轻代中gc次数
       YGCT 从应用程序启动到采样时年轻代中gc所用时间(s)
       FGC 从应用程序启动到采样时old代(全gc)gc次数
       FGCT 从应用程序启动到采样时old代(全gc)gc所用时间(s)
       GCT 从应用程序启动到采样时gc用的总时间(s)

    4、jstat -gccapacity <pid>:可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小
       NGCMN 年轻代(young)中初始化(最小)的大小(字节)
       NGCMX 年轻代(young)的最大容量 (字节)
       NGC 年轻代(young)中当前的容量 (字节)
       S0C 年轻代中第一个survivor（幸存区）的容量 (字节)
       S1C 年轻代中第二个survivor（幸存区）的容量 (字节)
       EC 年轻代中Eden（伊甸园）的容量 (字节)
       OGCMN old代中初始化(最小)的大小 (字节)
       OGCMX old代的最大容量(字节)
       OGC old代当前新生成的容量 (字节)
       OC Old代的容量 (字节)
       PGCMN perm代中初始化(最小)的大小 (字节)
       PGCMX perm代的最大容量 (字节)
       PGC perm代当前新生成的容量 (字节)
       PC Perm(持久代)的容量 (字节)
       YGC 从应用程序启动到采样时年轻代中gc次数
       FGC 从应用程序启动到采样时old代(全gc)gc次数

    5、jstat -gcutil <pid>:统计gc信息
       S0 年轻代中第一个survivor（幸存区）已使用的占当前容量百分比
       S1 年轻代中第二个survivor（幸存区）已使用的占当前容量百分比
       E 年轻代中Eden（伊甸园）已使用的占当前容量百分比
       O old代已使用的占当前容量百分比
       P perm代已使用的占当前容量百分比
       YGC 从应用程序启动到采样时年轻代中gc次数
       YGCT 从应用程序启动到采样时年轻代中gc所用时间(s)
       FGC 从应用程序启动到采样时old代(全gc)gc次数
       FGCT 从应用程序启动到采样时old代(全gc)gc所用时间(s)
       GCT 从应用程序启动到采样时gc用的总时间(s)

    6、jstat -gcnew <pid>:年轻代对象的信息。
       S0C 年轻代中第一个survivor（幸存区）的容量 (字节)
       S1C 年轻代中第二个survivor（幸存区）的容量 (字节)
       S0U 年轻代中第一个survivor（幸存区）目前已使用空间 (字节)
       S1U 年轻代中第二个survivor（幸存区）目前已使用空间 (字节)
       TT 持有次数限制
       MTT 最大持有次数限制
       DSS：当前需要survivor（幸存区）的容量 (字节)（Eden区已满）【待验证】
       EC 年轻代中Eden（伊甸园）的容量 (字节)
       EU 年轻代中Eden（伊甸园）目前已使用空间 (字节)
       YGC 从应用程序启动到采样时年轻代中gc次数
       YGCT 从应用程序启动到采样时年轻代中gc所用时间(s)

     7、jstat -gcnewcapacity<pid>: 年轻代对象的信息及其占用量
        NGCMN 年轻代(young)中初始化(最小)的大小(字节)
        NGCMX 年轻代(young)的最大容量 (字节)
        NGC 年轻代(young)中当前的容量 (字节)
        S0CMX 年轻代中第一个survivor（幸存区）的最大容量 (字节)
        S0C 年轻代中第一个survivor（幸存区）的容量 (字节)
        S1CMX 年轻代中第二个survivor（幸存区）的最大容量 (字节)
        S1C 年轻代中第二个survivor（幸存区）的容量 (字节)
        ECMX 年轻代中Eden（伊甸园）的最大容量 (字节)
        EC 年轻代中Eden（伊甸园）的容量 (字节)
        YGC 从应用程序启动到采样时年轻代中gc次数
        FGC 从应用程序启动到采样时old代(全gc)gc次数

     8、jstat -gcold <pid>：old代对象的信息
        PC Perm(持久代)的容量 (字节)
        PU Perm(持久代)目前已使用空间 (字节)
        OC Old代的容量 (字节)
        OU Old代目前已使用空间 (字节)
        YGC 从应用程序启动到采样时年轻代中gc次数
        FGC 从应用程序启动到采样时old代(全gc)gc次数
        FGCT 从应用程序启动到采样时old代(全gc)gc所用时间(s)
        GCT 从应用程序启动到采样时gc用的总时间(s)

     9、jstat -gcoldcapacity <pid>: old代对象的信息及其占用量。
        OGCMN old代中初始化(最小)的大小 (字节)
        OGCMX old代的最大容量(字节)
        OGC old代当前新生成的容量 (字节)
        OC Old代的容量 (字节)
        YGC 从应用程序启动到采样时年轻代中gc次数
        FGC 从应用程序启动到采样时old代(全gc)gc次数
        FGCT 从应用程序启动到采样时old代(全gc)gc所用时间(s)
        GCT 从应用程序启动到采样时gc用的总时间(s)

    10、jstat -gcpermcapacity <pid>: perm对象的信息及其占用量。
        PGCMN perm代中初始化(最小)的大小 (字节)
        PGCMX perm代的最大容量 (字节)
        PGC perm代当前新生成的容量 (字节)
        PC Perm(持久代)的容量 (字节)
        YGC 从应用程序启动到采样时年轻代中gc次数
        FGC 从应用程序启动到采样时old代(全gc)gc次数
        FGCT 从应用程序启动到采样时old代(全gc)gc所用时间(s)
        GCT 从应用程序启动到采样时gc用的总时间(s)

    11、jstat -printcompilation <pid>：当前VM执行的信息。
        Compiled 编译任务的数目
        Size 方法生成的字节码的大小
        Type 编译类型
        Method 类名和方法名用来标识编译的方法。类名使用/做为一个命名空间分隔符。方法名是给定类中的方法。

   参考：
        1、http://www.importnew.com/18202.html
        2、http://www.hollischuang.com/archives/1047

jinfo
    作用：jinfo可以输出java进程、core文件或远程debug服务器的配置信息
    语法：jinfo [ option ] pid
         jinfo [ option ] executable core
         jinfo [ option ] [server-id@]remote-hostname-or-IP

    option:
        -flag name:打印出给定属性的名称和值
        -flag [+|-]name：添加或删除给定的属性名称
        -flag name=value：将属性设置为给定的值
        -flags：打印出传递给jvm的参数
        -sysprops：已键值对的方式答应出jvm系统属性
        -h/help：答应帮助信息
    参考：
        1、http://docs.oracle.com/javase/7/docs/technotes/tools/share/jinfo.html
        2、http://www.hollischuang.com/archives/1094
        2、http://www.importnew.com/18373.html

    注：此命令在Java8中已不再提供


jmap
    作用：jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的共享对象内存映射或堆内存细节
    语法：
        jmap [option] <pid>：指定执行进程号
        jmap [option] <executable <core>：指定核心文件
        jmap [option] [server_id@]<remote server IP or hostname>：指定远程调试服务器
    参数说明：
        pid：需要打印配置信息的进程ID。该进程必须是一个Java进程。
        executable：产生核心dump的Java可执行文件。
        core：需要打印配置信息的核心文件。
        remote-hostname-or-IP：远程调试服务器的主机名或IP地址。
        server-id： 可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。
    option:
        <none>：如果使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。
        -dump:<dump-options> 以hprof二进制格式转储Java堆到指定filename的文件中。
              dump-options:
                  live：只转存储堆中存活的对象。如果没有指定，将导出所有的对象
                  format=b：二进制文件格式
                  file=<file>：转存储到指定文件
              例如：将pid号=1111的vm进程已hprof二进制格式转存储到filename.hprof中
                    jmap -dump:format=b,file=filename.hprof 1111
        -finalizerinfo：打印等待终结的对象信息。
        -heap：打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。
        -histo[:live]：打印堆的柱状图。其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’*’前缀。如果指定了live子选项，则只计算活动的对象。
        -permstat：打印Java堆内存的永久保存区域的类加载器的智能统计信息。
        -F：强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。
        -J<flag>：指定传递给运行jmap的JVM的参数。
        -h | -help：答应帮助信息。

    参考：
        1、http://www.hollischuang.com/archives/303
        2、http://www.importnew.com/18196.html


jhat
    全称：Java Heap Analysis Tool
    作用：是一个用来分析java的堆情况的命令。生成dump文件之后就可以用jhat命令，将dump文件转成html的形式，然后通过http访问可以查看堆情况。
    语法：jhat [-stack <bool>] [-refs <bool>] [-port <port>] [-baseline <file>] [-debug <int>] [-version] [-h|-help] <file>
          -stack false|true：关闭对象分配调用栈跟踪(tracking object allocation call stack)。 如果分配位置信息在堆转储中不可用. 则必须将此标志设置为 false. 默认值为 true.
          -refs false|true：关闭对象引用跟踪(tracking of references to objects)。 默认值为 true. 默认情况下, 返回的指针是指向其他特定对象的对象,如反向链接或输入引用(referrers or incoming references), 会统计/计算堆中的所有对象
          -port port-number：设置 jhat HTTP server 的端口号. 默认值 7000
          -exclude exclude-file：指定对象查询时需要排除的数据成员列表文件
          -baseline exclude-file：指定一个基准堆转储
          -debug int：设置 debug 级别. 0 表示不输出调试信息； 值越大则表示输出更详细的 debug 信息
          -version：启动后只显示版本信息就退出
          -J< flag >：通过 -J 可以在启动JVM时传入一些启动参数

    参考：
        1、http://www.importnew.com/18236.html
        2、http://www.hollischuang.com/archives/1047


jstack
    作用：jstack命令主要用来查看Java线程的调用堆栈的，可以用来分析线程问题（如死锁）。

    jstack命令查看线程堆栈信息可能会看到的几种状态：
        NEW：未启动的。不会出现在Dump中。
        RUNNABLE：在虚拟机内执行的。
        BLOCKED：受阻塞并等待监视器锁。
        WATING：无限期等待另一个线程执行特定操作。
        TIMED_WATING：有时限的等待另一个线程的特定操作。
        ERMINATED：已退出的。

    Monitor：Monitor是 Java中用以实现线程之间的互斥与协作的主要手段，它可以看成是对象或者 Class的锁。每一个对象都有，也仅有一个 monitor。

    进入区(Entrt Set):表示线程通过synchronized要求获取对象的锁。如果对象未被锁住,则迚入拥有者;否则则在进入区等待。一旦对象锁被其他线程释放,立即参与竞争。

    拥有者(The Owner):表示某一线程成功竞争到对象锁。

    等待区(Wait Set):表示线程通过对象的wait方法,释放对象的锁,并在等待区等待被唤醒。

    方法修饰：
        locked <地址> 目标：使用synchronized申请对象锁成功,监视器的拥有者。
        waiting to lock <地址> 目标：使用synchronized申请对象锁未成功,在迚入区等待。
        waiting on <地址> 目标：使用synchronized申请对象锁成功后,释放锁幵在等待区等待。
        parking to wait for <地址> 目标。

    locked：通过synchronized关键字,成功获取到了对象的锁,成为监视器的拥有者,在临界区内操作。对象锁是可以线程重入的。
    waiting to lock：通过synchronized关键字,没有获取到了对象的锁,线程在监视器的进入区等待。在调用栈顶出现,线程状态为Blocked。
    waiting on：通过synchronized关键字,成功获取到了对象的锁后,调用了wait方法,进入对象的等待区等待。在调用栈顶出现,线程状态为WAITING或TIMED_WATING。
    parking to wait for：park是基本的线程阻塞原语,不通过监视器在对象上阻塞。随concurrent包会出现的新的机制,不synchronized体系不同。

    语法：
        jstack [-l] <pid> (to connect to running process)
        jstack -F [-m] [-l] <pid>(to connect to a hung process)
        jstack [-m] [-l] <executable> <core>(to connect to a core file)
        jstack [-m] [-l] [server_id@]<remote server IP or hostname>(to connect to a remote debug server)

    参数：
         -F：使用jstack <pid>没有响应时，强制打印堆栈信息
         -m：打印java和本地方法栈的所有信息
         -l：打印关于锁的附加信息
         -h | -help：打印帮助信息

    参考：
        1、http://www.hollischuang.com/archives/110
        2、http://www.importnew.com/18176.html

