------------------------------------------------------------------第一章------------------------------------------------------------------------------
## 并发编程的挑战

### 上下文切换

CPU分配时间片，任务从保存到再加载的过程就是一次上下文切换。

#### 如何减少上下文切换

方法：无锁并发编程、CAS算法、使用最少线程、使用协成

无锁并发编程
    多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一些办法来避免使用锁，如将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据。

CAS算法
    Java的Atomic包使用CAS算法来更新数据，而不需要加锁。

使用最少线程
    避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这样会造成大量线程都处于等待状态。

协成
    在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。

#### 死锁

    避免死锁的几个方法：
        避免一个线程同时获取多个锁
        避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源
        尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制
        对于数据库锁，加锁和解锁必须在一个数据库链接里，否则会出现解锁失败的情况

资源限制

------------------------------------------------------------------第二章------------------------------------------------------------------------------
## java并发机制的底层实现原理

### volatile

    保证可见性：当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。

    cpu 缓存一致性协议































