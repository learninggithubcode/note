事 务 基 础（1）

1. MyBatis与Spring集成的主要原因之一是可以利用Spring的事务管理功能。

2. 什么是事务：一个完整的业务逻辑往往需要分步执行多个数据库操作，为保证执行结果的正确性，引入了事务的概念，事务有以下四个特性（ACID）：
① 原子性（Atomicity）：组成一个事务的多个数据库操作是一个不可分割的原子单元，要么全部执行成功，要么全部失效；
② 一致性（Consistency）：事务成功提交后，数据库所处的状态与业务规则是一致的，也就是要保证数据的完整性；
③ 隔离性（Isolation）：不同事务的数据库操作，不能相互干扰；
④ 持久性（Durability）：事务成功提交后，事务中的所有操作都必须持久化到数据库中。

3. 在以上的特性中，一致性是最终目标，其他都是为达到此目标而采取的手段或应有的要求。

-------------------------------------------------------------------------------------------------------
事 务 基 础（2）

1. 多个事务并发（同时）访问同一数据时，如果没有把这些事务隔离，就会产生并发性问题，破坏数据的完整性。
2. 这些问题分为以下5类：
①脏读（dirty read）；
②不可重复读（unrepeatable read）；
③幻象读（phantom read）；
④第一类丢失更新
⑤第二类丢失更新
3. 为解决这些并发问题，数据库采用了锁的机制。

-------------------------------------------------------------------------------------------------------

事 务 基 础（3）

1. 直接使用锁很麻烦，因此SQL 92标准定义了4个等级的事务隔离级别，只要指定了隔离级别，数据库就会自动为数据加上合适的锁。4个隔离级别及其解决的并发性问题如下（√表示允许，×表示不允许）：
隔离级别           脏读 不可重复读 幻象读 第一类丢失更新 第二类丢失更新
READ UNCOMMITTED  √ √ √ × √
READ COMMITTED    × √ √ × √
REPEATABLE READ   × × √ × ×
SERIALIZABLE      × × × × ×

 以上隔离级别的隔离等级由上至下逐渐增强。隔离等级越高，数据一致性越好，但性能（降低了并发性，并且加锁也是要耗费资源的）越差。而某些并发性问题在一些场合下是允许的，在另外一些情况下则
会产生严重问题，因此，应根据具体情况选定隔离级别，以达到数据一致性与性能之间的平衡。

-------------------------------------------------------------------------------------------------------

JDBC 对 事 务 的 支 持

1. 在JDBC的java.sql.Connection接口中，定义了代表四个隔离级别的常量。

2. 通过Connection对象的getMetaData()方法，可以获取一个java.sql.DatabaseMetaData对象，此对象包含数据库的元数据。调用此对象的相关方法，可查看数据库对事务的支持情况。

3. Connection默认是自动提交的，即每条SQL语句都作为一个事务。要想把多条SQL语句组合为一个事务，应禁止Connection自动提交，并设置事务隔离级别，然后执行SQL语句，最后根据情况提交或回滚。

4. 在JDBC 2.0中，事务回滚只能回滚到事务的起点，即撤销所有操作；自JDBC 3.0（JDK 1.4及以后版本），引入了保存点的概念，即java.sql.Savepoint接口。
    可在程序的不同地方设置各自的保存点，回滚时即可根据情况回滚到不同的保存点，而不是只能回滚到起点。